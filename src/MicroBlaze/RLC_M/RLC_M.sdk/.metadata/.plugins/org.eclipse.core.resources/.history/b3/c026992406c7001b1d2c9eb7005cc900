/*
 * main.c
 *
 *  Created on: 06.06.2021
 *      Author: Norbert
 */

#include "xparameters.h"
#include "xgpio.h"
#include "coder_ip.h"
#include "decoder_ip.h"
/**************************** user definitions ********************************/
#define CHANNEL 1
//RLC processor base addresses redefinition

// CODER
#define RLC_CODER_BASE_ADDR XPAR_RLC_CODER_IP_0_S00_AXI_BASEADDR

#define CODER_IN_FLAGS_OFF 	RLC_CODER_IP_S00_AXI_SLV_REG0_OFFSET // control
#define CODER_DATA_IN_OFF 	RLC_CODER_IP_S00_AXI_SLV_REG1_OFFSET // dataIn
#define CODER_OUT_FLAGS_OFF RLC_CODER_IP_S00_AXI_SLV_REG2_OFFSET // status
#define CODER_DATA_OUT_OFF	RLC_CODER_IP_S00_AXI_SLV_REG3_OFFSET // dataOut

// DECODER
#define RLC_DECODER_BASE_ADDR XPAR_RLC_DECODER_IP_0_S00_AXI_BASEADDR

#define DECODER_IN_FLAGS_OFF 	RLC_DECODER_IP_S00_AXI_SLV_REG0_OFFSET // control
#define DECODER_DATA_IN_OFF 	RLC_DECODER_IP_S00_AXI_SLV_REG1_OFFSET // dataIn
#define DECODER_OUT_FLAGS_OFF 	RLC_DECODER_IP_S00_AXI_SLV_REG2_OFFSET // status
#define DECODER_DATA_OUT_OFF	RLC_DECODER_IP_S00_AXI_SLV_REG3_OFFSET // dataOut

// OTHERS
#define CLEAR_BIT(v,a) (v & ~(((u32)1) << a))
#define SET_BIT(v,a) (v | (((u32)1) << a))

/***************************** Main function *********************************/

XGpio dataInGpio, dataOutGpio;//, selectGpio;

void failure()
{
	while(1);
}

void initializeGPIO()
{
	// data in
	int status = XGpio_Initialize(&dataInGpio, XPAR_AXI_GPIO_DATA_IN_DEVICE_ID);
	if (status != XST_SUCCESS) {
		failure();
	}
	XGpio_SetDataDirection(&dataInGpio, CHANNEL, 0xFFF);

	// data in
	status = XGpio_Initialize(&dataOutGpio, XPAR_AXI_GPIO_DATA_OUT_DEVICE_ID);
	if (status != XST_SUCCESS) {
		failure();
	}
	XGpio_SetDataDirection(&dataOutGpio, CHANNEL, 0x000);

	// data in
	//status = XGpio_Initialize(&selectGpio, XPAR_AXI_GPIO_SELECT_DEVICE_ID);
	//if (status != XST_SUCCESS) {
	//	failure();
	//}
	//XGpio_SetDataDirection(&selectGpio, CHANNEL, 0xFFF);
}

u32 getSelect()
{
	return 0;//XGpio_DiscreteRead(&selectGpio, CHANNEL);
}

u32 getData()
{
	return (u32)0b11111110000000001111100000101111;//XGpio_DiscreteRead(&dataInGpio, CHANNEL);
}

int main()
{
	initializeGPIO();

	XGpio_DiscreteWrite(&dataOutGpio, CHANNEL, 71);

	u32 control = (u32)0;
	u32 data_in = getData();
	u32 dataOut = (u32)0;

	//if(getSelect() == (u32)2) // coding 2'b10
	//{
		// Fill data vector
		RLC_CODER_IP_mWriteReg(RLC_CODER_BASE_ADDR, CODER_DATA_IN_OFF, data_in);

		// IN VALID FLAG
		control = SET_BIT(control, 0);
		RLC_CODER_IP_mWriteReg(RLC_CODER_BASE_ADDR, CODER_IN_FLAGS_OFF, control);

		// Wait for OUT_VALID in status register
		while( (RLC_CODER_IP_mReadReg(RLC_CODER_BASE_ADDR, CODER_OUT_FLAGS_OFF) & 0x02) == 1);

		// Read data
		dataOut = RLC_CODER_IP_mReadReg(RLC_CODER_BASE_ADDR, CODER_DATA_OUT_OFF);

		// Set flag that data is read (OUT_READY) and IN_VALID clear
		control = SET_BIT(control, 1);
		control = CLEAR_BIT(control, 0);
		RLC_CODER_IP_mWriteReg(RLC_CODER_BASE_ADDR, CODER_IN_FLAGS_OFF, control);

		// Write data to output
		XGpio_DiscreteWrite(&dataOutGpio, CHANNEL, dataOut);
	//}
	//else if(getSelect() == (u32)1) // decoding 2'b01
	//{
	/*	// Fill data vector
		RLC_DECODER_IP_mWriteReg(RLC_DECODER_BASE_ADDR, DECODER_DATA_IN_OFF, data_in);

		// IN VALID FLAG
		control = SET_BIT(control, 0);
		RLC_DECODER_IP_mWriteReg(RLC_DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF, control);

		// Wait for OUT_VALID in status register
		while( (RLC_DECODER_IP_mReadReg(RLC_DECODER_BASE_ADDR, DECODER_OUT_FLAGS_OFF) & 0x02) == 1);

		// Read data
		dataOut = RLC_DECODER_IP_mReadReg(RLC_DECODER_BASE_ADDR, DECODER_DATA_OUT_OFF);

		// Set flag that data is read (OUT_READY) and IN_VALID clear
		control = SET_BIT(control, 1);
		control = CLEAR_BIT(control, 0);
		RLC_DECODER_IP_mWriteReg(RLC_DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF, control);

		// Write data to output
		XGpio_DiscreteWrite(&dataOutGpio, CHANNEL, dataOut);
	}*/

	while(1);
}

