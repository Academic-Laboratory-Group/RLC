/*
 * rlc_decoder.c
 *
 *  Created on: 07.06.2021
 *      Author: Norbert
 */

#include "rlc_decoder.h"

int RLC2bin(u32 data_in, u32* data_out)
{
	u32 control = 0;
	u32 flags = 0;

	print("\n\rCheck ports:");
	print("\n\rIN:");
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF);
	print_u32(flags);
	print("\n\rOUT:");
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_OUT_FLAGS_OFF);
	print_u32(flags);
	print("\n\r");
	print("\n\r");


	print("\n\rSet controll bits to 0b00");
	control = CLEAR_BIT(control, 1);
	control = CLEAR_BIT(control, 0);
	print("\n\rControl bits: \n\r");
	print_u32(control);
	DECODER_IP_mWriteReg(DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF, control);
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF);
	print("\n\rAre they on register?:\n\r");
	print_u32(flags);
	print("\n\r");
	print("\n\r");

	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_OUT_FLAGS_OFF);
	print("\n\rCheck out flags: \n\r");
	print_u32(flags);

	print("\n\rWrite data_in: \n\r");
	print_u32(data_in);
	// Fill data vector
	DECODER_IP_mWriteReg(DECODER_BASE_ADDR, DECODER_DATA_IN_OFF, data_in);
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_DATA_IN_OFF);
	print("\n\rCheck if written: \n\r");
	print_u32(flags);
	print("\n\r");
	print("\n\r");


	// Start FLAG
	print("\n\rSet start: \n\r");
	control = SET_BIT(control, 0);
	print("\n\rcontrol: \n\r");
	print_u32(control);
	DECODER_IP_mWriteReg(DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF, control);
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF);
	print("\n\rAre they on register?:\n\r");
	print_u32(flags);
	print("\n\r");
	print("\n\r");

	// clear Start FLAG
	print("\n\rClear start: \n\r");
	control = CLEAR_BIT(control, 0);
	print("\n\rcontrol: \n\r");
	print_u32(control);
	DECODER_IP_mWriteReg(DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF, control);
	flags = CODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IN_FLAGS_OFF);
	print("\n\rAre they on register?:\n\r");
	print_u32(flags);
	print("\n\r");
	print("\n\r");

	// Wait for OUT_VALID in status register
	print("\n\rWait for OUT_VALID");
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_OUT_FLAGS_OFF);
	print("\n\rIOUT_VALID now: \n\r");
	print_u32(flags);
	print("\n\rWhile");
	while( (DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_OUT_FLAGS_OFF) & 1) != 1);
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_OUT_FLAGS_OFF);
	print("\n\rAfter while out flags: \n\r");
	print_u32(flags);
	print("\n\r");
	print("\n\r");

	print("\n\rRead data out");
	// Read data
	*data_out = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_DATA_OUT_OFF);
	print("\n\r*data_out: \n\r");
	print_u32(*data_out);
	print("\n\r");
	print("\n\r");


	print("\n\rAll registers:\n\r");
	print("\n\rreg0: ");
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IP_S00_AXI_SLV_REG0_OFFSET);
	print_u32(flags);
	print("\n\rreg1: ");
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IP_S00_AXI_SLV_REG1_OFFSET);
	print_u32(flags);
	print("\n\rreg2: ");
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IP_S00_AXI_SLV_REG2_OFFSET);
	print_u32(flags);
	print("\n\rreg3: ");
	flags = DECODER_IP_mReadReg(DECODER_BASE_ADDR, DECODER_IP_S00_AXI_SLV_REG3_OFFSET);
	print_u32(flags);
	print("\n\r");
	print("\n\r");

	return 0; // SUCCESS
}
